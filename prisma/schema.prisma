// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model Users {
  id        String      @id @default(uuid())
  name      String   
  email     String   @unique
  createdAt DateTime @default(now())
  role   Role  @default(USER) 
  updatedAt DateTime @updatedAt
  quizzes   Quiz[]  @relation("QuizMadeByUser")
  attemps   Attemps[] @relation("AttempsMadeByUser")
  answeredQuestions AnsweredQuestions[] @relation("AnsweredQuestionsMadeByUser")

  @@index([email], name: "email")

}

model Quiz {
  id       Int      @id @default(autoincrement())
  title     String
  description String?   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quizLength Int
  author    Users   @relation("QuizMadeByUser",fields: [userId], references: [id])
  userId   String
  category Categories[]
  categoryId Int
  questions Questions[] @relation("QuestionReferToQuiz")
  attemps   Attemps[] @relation("AttempsMadeInThisQuiz")
  answeredQuestions AnsweredQuestions[] @relation("AnswerQuestionFromQuiz")
}

model Categories {
  id       Int      @id @default(autoincrement())
  name     String   
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quizzes   Quiz[]
}

model Questions {
  id       Int      @id @default(autoincrement())
  question String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quiz     Quiz     @relation("QuestionReferToQuiz",fields: [quizId], references: [id])
  quizId   Int
  answers  Answers[] @relation("AnswerToQuestion")
  answeredQuestions AnsweredQuestions[] @relation("QuestionAnswered")
  likes    Int      @default(0)
  dislikes Int      @default(0)
}

model Answers {
  id       Int      @id @default(autoincrement())
  answer   String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isCorrect Boolean  @default(false)
  question Questions @relation("AnswerToQuestion", fields: [questionId], references: [id])
  questionId Int
  answeredQuestions AnsweredQuestions[] @relation("AnswerMade")

}

model AnsweredQuestions {
  id       Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user     Users    @relation("AnsweredQuestionsMadeByUser", fields: [userId], references: [id])
  userId   String
  question Questions @relation("QuestionAnswered", fields: [questionId], references: [id])
  questionId Int
  answer   Answers @relation("AnswerMade",fields: [answerId], references: [id])
  answerId Int
  quiz    Quiz     @relation("AnswerQuestionFromQuiz", fields: [quizId], references: [id])
  quizId   Int
  attemps  Attemps @relation("AnswerFromAttemp", fields: [attempsId], references: [id])
  attempsId Int
}


model Attemps {
  id       Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  finishedAt DateTime? @updatedAt
  quiz     Quiz     @relation("AttempsMadeInThisQuiz", fields: [quizId], references: [id])
  quizId   Int
  user     Users    @relation("AttempsMadeByUser", fields: [userId], references: [id])
  userId   String
  score    Int  
  answeredQuestions AnsweredQuestions[] @relation("AnswerFromAttemp")
}

// ? means optional

// Float or Decimal type

// JSON type

